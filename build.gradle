buildscript {
	ext {
		spring_boot_version = '2.0.0.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${spring_boot_version}")
	}
}

apply plugin: "maven"
apply plugin: "eclipse"

apply plugin: 'java-library'
apply plugin: 'org.springframework.boot'
apply plugin: 'io.spring.dependency-management'

sourceCompatibility = java_version_compatibility
targetCompatibility = java_version_compatibility

group = artifact_group_id
version = artifact_version
archivesBaseName = artifact_base_name

def artifactClassifier = project.hasProperty('classifier') ? classifier : "dev"

// Repositories to work with
repositories {
	// Local Maven Repo
	mavenLocal()
	mavenCentral()
	maven { url "https://repo.spring.io/milestone" }
	maven {url "https://repo.spring.io/libs-snapshot"}
}

configurations {
	compile.exclude module: 'spring-boot-starter-logging'
	compile.exclude module: 'spring-boot-starter-tomcat'
	compile.exclude module: 'spring-boot-starter-jetty'
	compile.exclude module: 'spring-security-web'
	compile.exclude module: 'spring-security-test'
	compile.exclude group: 'junit'
	compile.exclude group: 'org.apache.tomcat'
	compile.exclude module: 'spring-asm'
	compile.exclude group: 'asm'
	compile.exclude module: 'slf4j-log4j12'
	compile.exclude group: 'log4j'
	compile.exclude group: 'ch.qos.cal10n'
	compile.exclude group: 'ch.qos.logback'
	compile.exclude group: 'org.springframework.data'
}

ext {
	commons_codec_version = "1.11"
	commons_collections4_version = "4.1"
	commons_lang3_version = "3.7"
    guava_version = "24.0-jre"
	
	// Logging related
	slf4j_version = "1.8.0-beta1"
	log4j2_version = "2.10.0"
	lmax_disruptor_version = "3.3.7"
	
	// Tracing related
	//zipkin_brave_log4j2_version = "4.19.1"
	spring_cloud_release_train_version = "Finchley.BUILD-SNAPSHOT"
	brave_release_train_version = "4.19.2"
	
	// For unit testing
	testng_version = "6.14.2"
}

dependencyManagement {
	imports {
		mavenBom "io.zipkin.brave:brave-bom:${brave_release_train_version}"
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${spring_cloud_release_train_version}"
    }
}

dependencies {
    compile "org.springframework.boot:spring-boot-starter-actuator"
	compile "org.springframework.boot:spring-boot-starter-aop"
	compile "org.springframework.boot:spring-boot-starter-cache"
	compile "org.springframework.boot:spring-boot-starter-webflux"
	compile "org.springframework.boot:spring-boot-starter-hateoas"
	compile "org.springframework.boot:spring-boot-starter-log4j2"
	compile "org.springframework.cloud:spring-cloud-starter-sleuth"
	compile "org.springframework.cloud:spring-cloud-starter-zipkin"
	
	//compileOnly "org.springframework.boot:spring-boot-configuration-processor"
	
	compile "com.google.guava:guava:${guava_version}"
	compile "commons-codec:commons-codec:${commons_codec_version}"
	compile "org.apache.commons:commons-lang3:${commons_lang3_version}"
	compile "org.apache.commons:commons-collections4:${commons_collections4_version}"
	
	// Logging related
	compile "org.slf4j:slf4j-api:${slf4j_version}"
	compile "org.slf4j:slf4j-ext:${slf4j_version}"
	compile "org.slf4j:jcl-over-slf4j:${slf4j_version}"
	compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j2_version}"
    compile "org.apache.logging.log4j:log4j-api:${log4j2_version}"
    compile "org.apache.logging.log4j:log4j-core:${log4j2_version}"
    compile "org.apache.logging.log4j:log4j-web:${log4j2_version}"
    compile "org.apache.logging.log4j:log4j-slf4j-impl:${log4j2_version}"
    compile "com.lmax:disruptor:${lmax_disruptor_version}"
	
	// Tracing
	//compile "io.zipkin.brave:brave-context-log4j2:${zipkin_brave_log4j2_version}"
	
	// Unit tests
	testCompile "org.springframework.boot:spring-boot-starter-test"
	testCompile "io.projectreactor:reactor-test"
	testCompile "org.testng:testng:${testng_version}"
}

def scriptsDirectory = "./scripts"

bootJar {
	classifier = artifactClassifier
	manifest {
		attributes 'Manifest-Version': '1.0',
			'Start-Class': 'com.demo.SpringBoot2SleuthIntegrationApp',
			'Jdk-Version': System.getProperty('java.version') + ' (' + System.getProperty("java.vm.vendor") + ')',
			'Implementation-Version': version,
			'Implementation-Date': getImplementationDate()
	}
}

def getImplementationDate() {
	def dateFormat = new java.text.SimpleDateFormat('MMM dd, yyyy HH:mm:ss z')
	dateFormat.setTimeZone(java.util.TimeZone.getTimeZone("GMT"))
	return dateFormat.format(new java.util.Date())
}

springBoot {
	mainClassName = 'com.demo.SpringBoot2SleuthIntegrationApp' 
}